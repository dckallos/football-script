// === EXAMPLE PROGRAMS ===
// /Users/daniel/dev/football-script/examples/

// --- 1. penalty-shootout.fsc ---
// /Users/daniel/dev/football-script/examples/penalty-shootout.fsc
`
// ⚽ Penalty Shootout Game
// Learn loops and conditions with Chelsea players!

game "Chelsea Penalty Challenge" {
    blues PENALTIES_TO_TAKE = 5
    striker score = 0
    goalkeeper saves = 0

    // Chelsea penalty takers
    squad penalties = [
        {name: "Palmer", number: 20, skill: 95},
        {name: "Jackson", number: 15, skill: 85},
        {name: "Sterling", number: 7, skill: 88},
        {name: "Enzo", number: 8, skill: 82},
        {name: "James", number: 24, skill: 90}
    ]

    drill PENALTIES_TO_TAKE times {
        player shooter = penalties[i]

        // Ask player where to shoot
        ask "Where should " + shooter.name + " shoot? (left/center/right)" -> direction

        // Goalkeeper chooses randomly
        goalkeeper choice = random(["left", "center", "right"])

        announce(shooter.name + " steps up to take the penalty...")
        wait(1)

        if (direction != choice) {
            shoot(shooter)
            celebrate()
            score = score + 1
            chant("GOAL! " + shooter.name + " scores for Chelsea!")
        } else {
            announce("SAVED! The keeper guessed correctly!")
            saves = saves + 1
        }

        showScore(score, saves)
    }

    // Final result
    if (score >= 3) {
        celebrate()
        chant("Chelsea wins the shootout!")
        fireworks()
    } else {
        announce("Better luck next time, Blues!")
    }
}
`;

// --- 2. passing-masterclass.fsc ---
// /Users/daniel/dev/football-script/examples/passing-masterclass.fsc
`
// ⚡ Jorginho's Passing Masterclass
// Learn about functions and player interactions

blues PASS_ACCURACY_TARGET = 90

play tikaTaka(midfielder passer, midfielder receiver) {
    highlight(passer)
    pass(passer to receiver)
    wait(0.5)
    return true
}

play throughBall(midfielder creator, striker runner) {
    announce(creator + " spots the run!")
    highlight(creator)
    move runner to (80, 50)
    pass(creator to runner)
    return shoot(runner)
}

// Create the Chelsea midfield
midfielder jorginho = 5
midfielder enzo = 8
midfielder mount = 19
striker jackson = 15

// Warm up with simple passes
session "Warm Up" {
    drill 5 times {
        tikaTaka(jorginho, enzo)
        tikaTaka(enzo, mount)
        tikaTaka(mount, jorginho)
    }
}

// Advanced passing patterns
formation DiamondMidfield {
    play execute() {
        // Diamond shape passing
        move jorginho to (50, 60)  // Base
        move enzo to (40, 40)      // Left
        move mount to (60, 40)     // Right
        move jackson to (50, 20)   // Top

        // Execute pattern
        pass(jorginho to enzo)
        pass(enzo to jackson)
        pass(jackson to mount)
        pass(mount to jorginho)

        // Finish with through ball
        throughBall(jorginho, jackson)
    }
}

// Execute the formation
myFormation = new DiamondMidfield()
myFormation.execute()

// Track statistics
stats {
    passes: 20,
    completed: 18,
    accuracy: 90,

    play report() {
        if (this.accuracy >= PASS_ACCURACY_TARGET) {
            chant("Perfect passing from the Blues!")
            celebrate()
        }
    }
}
`;

// --- 3. dribbling-academy.fsc ---
// /Users/daniel/dev/football-script/examples/dribbling-academy.fsc
`
// 🏃 Hazard Dribbling Academy
// Learn about movement, collision detection, and events

academy "Eden Hazard Dribbling School" {
    player hazard = 10
    blues cones = []
    striker score = 0

    // Setup training cones
    play setupCones() {
        for (midfielder i from 1 to 5) {
            cone = {
                x: 20 + (i * 15),
                y: 40 + random(-10, 10)
            }
            cones.push(cone)
            drawCone(cone)
        }
    }

    // Dribbling mechanics
    play dribblePast(player dribbler, obstacle cone) {
        highlight(dribbler)

        // Calculate dribble path
        if (cone.y > 50) {
            move dribbler to (cone.x, cone.y - 20)
        } else {
            move dribbler to (cone.x, cone.y + 20)
        }

        // Skill move animation
        spin(dribbler)
        return true
    }

    // Main training drill
    play train() {
        setupCones()
        move hazard to (10, 50)

        for each cone in cones {
            if (dribblePast(hazard, cone)) {
                score = score + 10
                announce("Brilliant skill from Hazard!")
            } else {
                announce("Oops! Hit the cone!")
                score = score - 5
            }
        }

        // Final shot
        move hazard to (75, 50)
        shoot(hazard)
        celebrate()

        showFinalScore(score)
    }
}

// Run the academy
myAcademy = new academy()
myAcademy.train()

// Bonus: Free dribbling mode
when key "ARROW_UP" pressed {
    move hazard up 10
}

when key "ARROW_DOWN" pressed {
    move hazard down 10
}

when key "ARROW_LEFT" pressed {
    move hazard left 10
}

when key "ARROW_RIGHT" pressed {
    move hazard right 10
}

when key "SPACE" pressed {
    shoot(hazard)
}
`;

// --- 4. chelsea-tactics.fsc ---
// /Users/daniel/dev/football-script/examples/chelsea-tactics.fsc
`
// 📋 Pochettino's Tactical Board
// Advanced: Learn about formations, strategies, and team coordination

formation Pochettino433 {
    // Defensive line
    goalkeeper sanchez = 1
    defender james = 24
    defender silva = 6
    defender colwill = 26
    defender chilwell = 21

    // Midfield trio
    midfielder enzo = 8
    midfielder caicedo = 25
    midfielder palmer = 20

    // Front three
    striker sterling = 7
    striker jackson = 15
    striker mudryk = 10

    blues formation = "4-3-3"
    blues style = "High Press"

    play setupFormation() {
        // Position players
        move sanchez to (5, 50)

        // Back four
        move james to (20, 20)
        move silva to (20, 40)
        move colwill to (20, 60)
        move chilwell to (20, 80)

        // Midfield
        move enzo to (40, 50)
        move caicedo to (40, 35)
        move palmer to (40, 65)

        // Attack
        move sterling to (65, 25)
        move jackson to (65, 50)
        move mudryk to (65, 75)
    }

    play highPress() {
        announce("Activating high press!")

        // Move everyone forward
        for each player in [james, silva, colwill, chilwell] {
            moveForward(player, 15)
        }

        for each player in [enzo, caicedo, palmer] {
            moveForward(player, 20)
        }

        for each player in [sterling, jackson, mudryk] {
            moveForward(player, 10)
        }
    }

    play buildFromBack() {
        announce("Building from the back...")

        pass(sanchez to silva)
        pass(silva to enzo)
        pass(enzo to caicedo)
        pass(caicedo to palmer)

        // Switch play
        pass(palmer to mudryk)

        // Create chance
        pass(mudryk to jackson)
        shoot(jackson)
    }

    play counterAttack() {
        announce("COUNTER ATTACK!")

        // Quick transition
        pass(silva to enzo)
        throughBall(enzo to sterling)

        // Sterling's pace
        sprint(sterling to (85, 30))

        // Square ball
        pass(sterling to jackson)
        shoot(jackson)

        celebrate()
    }
}

// Match simulation
play matchSimulation() {
    formation = new Pochettino433()
    formation.setupFormation()

    // Different phases of play
    phase "First Half" {
        formation.buildFromBack()
        wait(2)
        formation.highPress()
        wait(2)
        formation.counterAttack()
    }

    halftime()

    phase "Second Half" {
        // Tactical change
        formation.style = "Possession"
        announce("Tactical switch: Controlling possession")

        drill 3 times {
            formation.buildFromBack()
        }
    }

    fulltime()
}

matchSimulation()
`;

// --- 5. champions-league.fsc ---
// /Users/daniel/dev/football-script/examples/champions-league.fsc
`
// 🏆 Champions League Night at Stamford Bridge
// Advanced: Events, animations, and full match simulation

blues CHAMPIONS_LEAGUE_ANTHEM = true
blues STAMFORD_BRIDGE_CAPACITY = 40834

match "Chelsea vs Real Madrid" {
    // Teams
    team Chelsea {
        formation: "4-2-3-1",
        players: {
            gk: {name: "Sanchez", number: 1},
            def: [{name: "James", number: 24}, {name: "Silva", number: 6},
                  {name: "Colwill", number: 26}, {name: "Chilwell", number: 21}],
            mid: [{name: "Enzo", number: 8}, {name: "Caicedo", number: 25},
                  {name: "Palmer", number: 20}, {name: "Sterling", number: 7},
                  {name: "Mudryk", number: 10}],
            str: [{name: "Jackson", number: 15}]
        }
    }

    // Match state
    blues minute = 0
    blues chelseaScore = 0
    blues madridScore = 0

    event kickoff() {
        if (CHAMPIONS_LEAGUE_ANTHEM) {
            playAnthem()
            crowdRoar(STAMFORD_BRIDGE_CAPACITY)
        }

        announce("The Champions League night begins at Stamford Bridge!")
        centerCircle()
    }

    event goal(striker scorer, blues team) {
        if (team == "Chelsea") {
            chelseaScore++
            celebrate()
            fireworks()
            chant("Chelsea! Chelsea! Chelsea!")
            replay(scorer)
        } else {
            madridScore++
            announce("Goal for the visitors...")
        }

        updateScoreboard(chelseaScore, madridScore)
    }

    event chance(player attacker) {
        highlight(attacker)
        announce("What a chance for " + attacker.name + "!")

        blues success = random(1, 100)

        if (success > 70) {
            shoot(attacker)
            goal(attacker, "Chelsea")
        } else if (success > 40) {
            announce("Great save by the keeper!")
        } else {
            announce("Over the bar!")
        }
    }

    // Match flow
    play simulate() {
        kickoff()

        session until minute >= 90 {
            minute++

            // Random events
            if (minute == 10) {
                chance(Chelsea.players.str[0])
            }

            if (minute == 25) {
                announce("Palmer with a fantastic run!")
                dribble(Chelsea.players.mid[2])
                chance(Chelsea.players.mid[2])
            }

            if (minute == 45) {
                announce("HALFTIME")
                showStats()
            }

            if (minute == 67) {
                announce("Substitution: Nkunku comes on!")
                substitute(Chelsea.players.str[0], {name: "Nkunku", number: 18})
            }

            if (minute == 85) {
                announce("Late drama at Stamford Bridge!")
                chance(Chelsea.players.mid[3])
            }

            // Simulate general play
            if (minute % 5 == 0) {
                randomPlay()
            }
        }

        fulltime()
        showFinalScore(chelseaScore, madridScore)

        if (chelseaScore > madridScore) {
            celebrate()
            chant("We've won the cup! We've won the cup!")
            lapOfHonour()
        }
    }

    play randomPlay() {
        blues action = random(["pass", "dribble", "cross", "tackle"])
        blues player = randomPlayer(Chelsea.players)

        switch(action) {
            case "pass":
                pass(player to randomPlayer(Chelsea.players))
            case "dribble":
                dribble(player)
            case "cross":
                cross(player)
            case "tackle":
                tackle(player)
        }
    }
}

// Run the match
championsLeagueNight = new match()
championsLeagueNight.simulate()
`;

// === TUTORIALS ===
// /Users/daniel/dev/football-script/tutorials/

// --- Tutorial 1: Your First Goal ---
// /Users/daniel/dev/football-script/tutorials/01-first-goal.js
const tutorial1 = {
  title: "Your First Goal",
  level: "youth",
  steps: [
    {
      instruction: "Let's create your first Chelsea player!",
      hint: "Type: player mount = 19",
      code: "",
      validate: (code) => code.includes("player") && code.includes("mount"),
      success: "Great! You've created Mason Mount!"
    },
    {
      instruction: "Now let's make Mount shoot at goal!",
      hint: "Type: shoot(mount)",
      code: "",
      validate: (code) => code.includes("shoot(mount)"),
      success: "⚽ GOAL! You've scored your first goal!"
    },
    {
      instruction: "Let's celebrate the goal!",
      hint: "Type: celebrate()",
      code: "",
      validate: (code) => code.includes("celebrate()"),
      success: "🎉 Amazing! The crowd goes wild!"
    }
  ],
  complete: "Congratulations! You've completed your first FootballScript program!"
};

// --- Tutorial 2: Passing Practice ---
// /Users/daniel/dev/football-script/tutorials/02-passing.js
const tutorial2 = {
  title: "Passing Practice",
  level: "youth",
  steps: [
    {
      instruction: "Create two Chelsea players",
      hint: "Create Palmer and Jackson with their numbers",
      code: `player palmer = 20
player jackson = 15`,
      validate: (code) => code.includes("palmer") && code.includes("jackson"),
      success: "Perfect! Palmer and Jackson are ready!"
    },
    {
      instruction: "Make Palmer pass to Jackson",
      hint: "Use: pass(palmer to jackson)",
      code: "",
      validate: (code) => code.includes("pass") && code.includes("to"),
      success: "Great pass! The ball reaches Jackson!"
    },
    {
      instruction: "Now Jackson shoots!",
      hint: "Make Jackson shoot at goal",
      code: "",
      validate: (code) => code.includes("shoot(jackson)"),
      success: "GOAL! What a finish from Jackson!"
    }
  ],
  complete: "Well done! You've mastered passing and shooting!"
};

// --- Tutorial 3: Your First Loop ---
// /Users/daniel/dev/football-script/tutorials/03-loops.js
const tutorial3 = {
  title: "Training Drills",
  level: "first",
  steps: [
    {
      instruction: "Create a player for training",
      hint: "Create any Chelsea player",
      code: "player sterling = 7",
      validate: (code) => code.includes("player"),
      success: "Player ready for training!"
    },
    {
      instruction: "Make the player practice shooting 3 times",
      hint: "Use: drill 3 times { shoot(sterling) }",
      code: "",
      validate: (code) => code.includes("drill") && code.includes("times"),
      success: "Excellent! Sterling completed 3 shots!"
    },
    {
      instruction: "Add a celebration after each goal",
      hint: "Add celebrate() inside the drill",
      code: "",
      validate: (code) => code.includes("celebrate"),
      success: "Perfect training session!"
    }
  ],
  complete: "Great job! You've learned how to use loops for training drills!"
};

// --- Tutorial 4: Making Decisions ---
// /Users/daniel/dev/football-script/tutorials/04-conditions.js
const tutorial4 = {
  title: "Tactical Decisions",
  level: "first",
  steps: [
    {
      instruction: "Create a variable for the score",
      hint: "Use: striker score = 0",
      code: "",
      validate: (code) => code.includes("score"),
      success: "Score tracker created!"
    },
    {
      instruction: "Check if we're winning",
      hint: "Use: if (score > 0) { celebrate() }",
      code: "",
      validate: (code) => code.includes("if") && code.includes("score"),
      success: "You can now make decisions based on the score!"
    },
    {
      instruction: "Add an else case for when we're not winning",
      hint: "Add: else { chant(\"Come on Chelsea!\") }",
      code: "",
      validate: (code) => code.includes("else"),
      success: "Perfect! You've mastered conditional logic!"
    }
  ],
  complete: "Brilliant! You can now make tactical decisions in your code!"
};

// --- Tutorial 5: Creating Plays ---
// /Users/daniel/dev/football-script/tutorials/05-functions.js
const tutorial5 = {
  title: "Creating Plays",
  level: "champions",
  steps: [
    {
      instruction: "Define a corner kick play",
      hint: "Use: play cornerKick() { }",
      code: "",
      validate: (code) => code.includes("play") && code.includes("cornerKick"),
      success: "Corner kick play created!"
    },
    {
      instruction: "Add players to the play",
      hint: "Inside the play, position players and make them shoot",
      code: "",
      validate: (code) => code.includes("shoot"),
      success: "Tactical play is ready!"
    },
    {
      instruction: "Execute the corner kick",
      hint: "Call: cornerKick()",
      code: "",
      validate: (code) => code.includes("cornerKick()"),
      success: "What a set piece! Straight from the training ground!"
    }
  ],
  complete: "Amazing! You're now creating tactical plays like a real manager!"
};

// Export all tutorials
module.exports = {
  tutorials: [tutorial1, tutorial2, tutorial3, tutorial4, tutorial5],
  examples: {
    penaltyShootout: '/examples/penalty-shootout.fsc',
    passingMasterclass: '/examples/passing-masterclass.fsc',
    dribblingAcademy: '/examples/dribbling-academy.fsc',
    chelseaTactics: '/examples/chelsea-tactics.fsc',
    championsLeague: '/examples/champions-league.fsc'
  }
};
