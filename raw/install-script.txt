#!/bin/bash

# === FootballScript Installation Script ===
# /Users/daniel/dev/football-script/install.sh

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# ASCII Art Logo
echo -e "${BLUE}"
cat << "EOF"
 ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 ‚ïë     ‚öΩ  FootballScript Installation  ‚öΩ    ‚ïë
 ‚ïë         Chelsea FC Edition               ‚ïë
 ‚ïë     Keep The Blue Flag Flying High!      ‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Project directory
PROJECT_DIR="/Users/daniel/dev/football-script"

echo -e "${BLUE}üìÅ Creating FootballScript project at: $PROJECT_DIR${NC}"

# Create main project directory
mkdir -p "$PROJECT_DIR"
cd "$PROJECT_DIR"

# Create directory structure
echo -e "${YELLOW}üìÇ Setting up project structure...${NC}"

directories=(
    "compiler"
    "runtime"
    "playground/public"
    "cli"
    "examples"
    "tutorials"
    "tests"
    "tools/ide-support/vscode/syntaxes"
    "tools/ide-support/vscode/themes"
    "tools/ide-support/vscode/snippets"
    "package-manager"
    "docs"
    "assets/sprites"
    "assets/sounds"
)

for dir in "${directories[@]}"; do
    mkdir -p "$dir"
    echo -e "  ‚úÖ Created: $dir"
done

# === Create package.json ===
echo -e "${YELLOW}üì¶ Creating package.json...${NC}"
cat > package.json << 'ENDOFPACKAGE'
{
  "name": "@footballscript/core",
  "version": "1.0.0",
  "description": "FootballScript - Educational Programming Language for Young Chelsea Fans",
  "main": "dist/index.js",
  "bin": {
    "chelsea": "./cli/index.js",
    "footballscript": "./cli/index.js",
    "fsc": "./cli/index.js"
  },
  "scripts": {
    "start": "node playground/server.js",
    "build": "npm run compile && npm run bundle",
    "compile": "tsc",
    "bundle": "webpack",
    "test": "jest",
    "dev": "nodemon playground/server.js",
    "playground": "npm start & sleep 2 && open http://localhost:3000",
    "docs": "typedoc --out docs compiler/index.ts",
    "lint": "eslint . --ext .ts,.js",
    "format": "prettier --write '**/*.{ts,js,json,md}'",
    "postinstall": "npm run build"
  },
  "keywords": [
    "programming-language",
    "educational",
    "chelsea-fc",
    "football",
    "kids-coding"
  ],
  "author": "FootballScript Team",
  "license": "MIT",
  "dependencies": {
    "chalk": "^5.3.0",
    "commander": "^11.1.0",
    "express": "^4.18.2",
    "fs-extra": "^11.2.0",
    "inquirer": "^9.2.12",
    "ora": "^7.0.1"
  },
  "devDependencies": {
    "@types/node": "^20.10.0",
    "eslint": "^8.55.0",
    "jest": "^29.7.0",
    "nodemon": "^3.0.2",
    "prettier": "^3.1.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3",
    "webpack": "^5.89.0",
    "webpack-cli": "^5.1.4"
  }
}
ENDOFPACKAGE

# === Create TypeScript configuration ===
echo -e "${YELLOW}‚öôÔ∏è  Creating TypeScript configuration...${NC}"
cat > tsconfig.json << 'ENDOFTS'
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020", "DOM"],
    "outDir": "./dist",
    "rootDir": "./",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "declaration": true,
    "sourceMap": true
  },
  "include": ["compiler/**/*", "runtime/**/*", "cli/**/*"],
  "exclude": ["node_modules", "dist", "tests"]
}
ENDOFTS

# === Create .gitignore ===
cat > .gitignore << 'ENDOFGIT'
node_modules/
dist/
build/
*.log
.DS_Store
.env
coverage/
*.temp.js
.cache/
ENDOFGIT

# === Create CLI executable ===
echo -e "${YELLOW}üîß Creating CLI tool...${NC}"
cat > cli/index.js << 'ENDOFCLI'
#!/usr/bin/env node
const { program } = require('commander');
const chalk = require('chalk');
const fs = require('fs-extra');
const path = require('path');

const logo = chalk.blue(`
 ‚öΩ  FootballScript - Chelsea FC  ‚öΩ
    Keep The Blue Flag Flying High!
`);

program
  .name('chelsea')
  .description('FootballScript CLI')
  .version('1.0.0');

program
  .command('run <file>')
  .description('Execute FootballScript program')
  .action(async (file) => {
    console.log(logo);
    console.log(chalk.green(`Running ${file} at Stamford Bridge...`));
    // Implementation will be added after compiler is built
  });

program
  .command('playground')
  .description('Open visual playground')
  .action(() => {
    console.log(logo);
    console.log(chalk.blue('Opening FootballScript Playground...'));
    require('child_process').exec('open http://localhost:3000');
    require('../playground/server');
  });

program.parse(process.argv);
ENDOFCLI

chmod +x cli/index.js

# === Create playground server ===
echo -e "${YELLOW}üéÆ Creating playground server...${NC}"
cat > playground/server.js << 'ENDOFSERVER'
const express = require('express');
const path = require('path');
const app = express();
const port = process.env.PORT || 3000;

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(port, () => {
    console.log(`‚öΩ FootballScript Playground running at http://localhost:${port}`);
    console.log('üíô Keep The Blue Flag Flying High!');
});
ENDOFSERVER

# === Create example programs ===
echo -e "${YELLOW}üìù Creating example programs...${NC}"

cat > examples/hello-chelsea.fsc << 'ENDOFEXAMPLE'
// Welcome to FootballScript!
// Let's score our first goal for Chelsea!

player mount = 19
player havertz = 29

pass(mount to havertz)
shoot(havertz)
celebrate()
chant("Chelsea! Chelsea! Chelsea!")
ENDOFEXAMPLE

cat > examples/training-drill.fsc << 'ENDOFEXAMPLE2'
// Training session at Cobham

midfielder palmer = 20
midfielder enzo = 8
striker jackson = 15

drill 5 times {
    pass(palmer to enzo)
    pass(enzo to jackson)
    shoot(jackson)
}

celebrate()
ENDOFEXAMPLE2

# === Create README ===
echo -e "${YELLOW}üìñ Creating README...${NC}"
cat > README.md << 'ENDOFREADME'
# ‚öΩ FootballScript - Chelsea FC Edition

Educational programming language for young Chelsea fans!

## Quick Start

```bash
# Install dependencies
npm install

# Run an example
chelsea run examples/hello-chelsea.fsc

# Open playground
chelsea playground
```

## Learn More

Visit the docs folder for tutorials and documentation.

Keep The Blue Flag Flying High! üíô
ENDOFREADME

# === Install dependencies ===
echo -e "${YELLOW}üì¶ Installing dependencies...${NC}"
npm install

# === Create initial compiler stub ===
echo -e "${YELLOW}üî® Creating compiler stub...${NC}"
mkdir -p dist
cat > dist/compiler.js << 'ENDOFCOMPILER'
class FootballScriptCompiler {
    compile(source) {
        // Basic implementation - will be replaced with full compiler
        console.log("Compiling FootballScript...");
        return `
            console.log("‚öΩ FootballScript Runtime");
            console.log("üíô Chelsea FC");
            ${source.replace(/player (\w+) = (\d+)/g, 'console.log("Created player $1 with number $2");')}
            ${source.replace(/shoot\((\w+)\)/g, 'console.log("$1 shoots... GOAL!");')}
            ${source.replace(/celebrate\(\)/g, 'console.log("üéâ CELEBRATION!");')}
        `;
    }
}

module.exports = { FootballScriptCompiler };
ENDOFCOMPILER

# === Create symbolic links for global command ===
echo -e "${YELLOW}üîó Setting up global commands...${NC}"
npm link

# === Create VS Code workspace ===
cat > footballscript.code-workspace << 'ENDOFWORKSPACE'
{
    "folders": [
        {
            "path": "."
        }
    ],
    "settings": {
        "files.associations": {
            "*.fsc": "footballscript"
        },
        "editor.fontSize": 14,
        "editor.fontFamily": "Monaco, 'Courier New', monospace",
        "workbench.colorTheme": "Stamford Bridge Blue",
        "terminal.integrated.defaultProfile.osx": "bash"
    },
    "extensions": {
        "recommendations": [
            "footballscript.footballscript-vscode"
        ]
    }
}
ENDOFWORKSPACE

# === Final setup ===
echo -e "${GREEN}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë         ‚úÖ FootballScript Installation Complete!         ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

echo -e "${BLUE}üìÅ Project created at: $PROJECT_DIR${NC}"
echo ""
echo -e "${YELLOW}üöÄ Next steps:${NC}"
echo "  1. cd $PROJECT_DIR"
echo "  2. chelsea run examples/hello-chelsea.fsc"
echo "  3. chelsea playground"
echo ""
echo -e "${BLUE}üíô Keep The Blue Flag Flying High!${NC}"

# === Create a simple test to verify installation ===
echo -e "${YELLOW}üß™ Running installation test...${NC}"
node -e "console.log('‚úÖ Node.js working')"
npm --version > /dev/null && echo "‚úÖ npm installed"
which chelsea > /dev/null && echo "‚úÖ chelsea command available" || echo "‚ö†Ô∏è  chelsea command not in PATH"

echo ""
echo -e "${GREEN}üéâ Ready to code with FootballScript!${NC}"

# === Optional: Open VS Code ===
read -p "Would you like to open the project in VS Code? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    code "$PROJECT_DIR"
fi

# === Optional: Start playground ===
read -p "Would you like to start the FootballScript playground? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    cd "$PROJECT_DIR"
    npm run playground
fi
